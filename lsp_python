{ {
    _log_prefix = "LSP[ruff_lsp]",
    _on_attach_cbs = { <function 1> },
    _on_exit_cbs = { <function 2>, <function 3> },
    _on_init_cbs = { <function 4> },
    _trace = "off",
    attached_buffers = {
      [4] = true
    },
    cancel_request = <function 5>,
    capabilities = <1>{
      general = {
        positionEncodings = <2>{ "utf-16" }
      },
      textDocument = {
        callHierarchy = {
          dynamicRegistration = false
        },
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = <3>{ "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = true,
          isPreferredSupport = true,
          resolveSupport = {
            properties = <4>{ "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = <5>{ "markdown", "plaintext" },
            insertReplaceSupport = true,
            insertTextModeSupport = <6>{
              valueSet = <7>{ 1, 2 }
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = <8>{
              properties = <9>{ "documentation", "detail", "additionalTextEdits", "sortText", "filterText", "insertText", "textEdit", "insertTextFormat", "insertTextMode" }
            },
            snippetSupport = true,
            tagSupport = <10>{
              valueSet = <11>{ 1 }
            }
          },
          completionItemKind = {
            valueSet = <12>{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          completionList = {
            itemDefaults = <13>{ "commitCharacters", "editRange", "insertTextFormat", "insertTextMode", "data" }
          },
          contextSupport = true,
          dynamicRegistration = false,
          insertTextMode = 1
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          dynamicRegistration = true,
          linkSupport = true
        },
        diagnostic = {
          dynamicRegistration = false
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = <14>{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        formatting = {
          dynamicRegistration = true
        },
        hover = {
          contentFormat = <15>{ "markdown", "plaintext" },
          dynamicRegistration = true
        },
        implementation = {
          linkSupport = true
        },
        inlayHint = {
          dynamicRegistration = true,
          resolveSupport = {
            properties = <16>{ "textEdits", "tooltip", "location", "command" }
          }
        },
        publishDiagnostics = {
          dataSupport = true,
          relatedInformation = true,
          tagSupport = {
            valueSet = <17>{ 1, 2 }
          }
        },
        rangeFormatting = {
          dynamicRegistration = true
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = true,
          prepareSupport = true
        },
        semanticTokens = {
          augmentsSyntaxTokens = true,
          dynamicRegistration = false,
          formats = <18>{ "relative" },
          multilineTokenSupport = false,
          overlappingTokenSupport = true,
          requests = {
            full = {
              delta = true
            },
            range = false
          },
          serverCancelSupport = false,
          tokenModifiers = <19>{ "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
          tokenTypes = <20>{ "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = <21>{ "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = true,
          willSaveWaitUntil = true
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = true
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        didChangeConfiguration = {
          dynamicRegistration = false
        },
        didChangeWatchedFiles = {
          dynamicRegistration = true,
          relativePatternSupport = true
        },
        inlayHint = {
          refreshSupport = true
        },
        semanticTokens = {
          refreshSupport = true
        },
        symbol = {
          dynamicRegistration = false,
          symbolKind = {
            valueSet = <22>{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = <23>{ "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    commands = {},
    config = {
      autostart = true,
      capabilities = <table 1>,
      cmd = { "/Users/andrea.marisio/.local/share/nvim/mason/bin/ruff-lsp" },
      cmd_cwd = "/Users/andrea.marisio/Projects/claim-image-services",
      filetypes = { "python" },
      handlers = <24>{},
      init_options = <25>vim.empty_dict(),
      log_level = 2,
      message_level = 2,
      name = "ruff_lsp",
      on_attach = <function 1>,
      on_exit = <function 2>,
      on_init = <function 4>,
      root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
      settings = <26>{},
      single_file_support = true,
      workspace_folders = <27>{ {
          name = "/Users/andrea.marisio/Projects/claim-image-services",
          uri = "file:///Users/andrea.marisio/Projects/claim-image-services"
        } },
      <metatable> = <28>{
        __tostring = <function 6>
      }
    },
    dynamic_capabilities = {
      capabilities = {},
      client_id = 2,
      <metatable> = {
        __index = <29>{
          get = <function 7>,
          match = <function 8>,
          new = <function 9>,
          register = <function 10>,
          supports = <function 11>,
          supports_registration = <function 12>,
          unregister = <function 13>
        }
      }
    },
    flags = {},
    get_language_id = <function 14>,
    handlers = <table 24>,
    id = 2,
    initialized = true,
    is_stopped = <function 15>,
    messages = {
      messages = {},
      name = "ruff_lsp",
      progress = {},
      status = {}
    },
    name = "ruff_lsp",
    notify = <function 16>,
    offset_encoding = "utf-16",
    on_attach = <function 17>,
    progress = {
      _idx_read = 0,
      _idx_write = 0,
      _items = {},
      _size = 51,
      pending = {},
      <metatable> = {
        __call = <function 18>,
        __index = <30>{
          clear = <function 19>,
          peek = <function 20>,
          pop = <function 21>,
          push = <function 22>
        }
      }
    },
    request = <function 23>,
    request_sync = <function 24>,
    requests = {},
    root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
    rpc = {
      is_closing = <function 25>,
      notify = <function 26>,
      request = <function 27>,
      terminate = <function 28>
    },
    server_capabilities = {
      codeActionProvider = {
        codeActionKinds = { "quickfix", "source.fixAll", "source.organizeImports", "source.fixAll.ruff", "source.organizeImports.ruff", "notebook.source.fixAll", "notebook.source.organizeImports", "notebook.source.fixAll.ruff", "notebook.source.organizeImports.ruff" },
        resolveProvider = true
      },
      documentFormattingProvider = true,
      documentRangeFormattingProvider = {
        documentSelector = { {
            language = "python",
            scheme = "file"
          }, {
            language = "python",
            scheme = "untitled"
          } },
        rangesSupport = false,
        workDoneProgress = false
      },
      executeCommandProvider = {
        commands = { "ruff.applyAutofix", "ruff.applyOrganizeImports", "ruff.applyFormat" }
      },
      hoverProvider = true,
      positionEncoding = "utf-16",
      textDocumentSync = {
        change = 2,
        openClose = true,
        save = true,
        willSave = false,
        willSaveWaitUntil = false
      },
      workspace = {
        fileOperations = vim.empty_dict(),
        workspaceFolders = {
          changeNotifications = true,
          supported = true
        }
      }
    },
    settings = <table 26>,
    stop = <function 29>,
    supports_method = <function 30>,
    workspace_did_change_configuration = <function 31>,
    workspace_folders = <table 27>,
    <metatable> = <31>{
      __index = <table 31>,
      _add_workspace_folder = <function 32>,
      _cancel_request = <function 33>,
      _exec_cmd = <function 34>,
      _is_stopped = <function 35>,
      _notification = <function 36>,
      _notify = <function 37>,
      _on_attach = <function 38>,
      _on_error = <function 39>,
      _on_exit = <function 40>,
      _remove_workspace_folder = <function 41>,
      _request = <function 42>,
      _request_sync = <function 43>,
      _resolve_handler = <function 44>,
      _run_callbacks = <function 45>,
      _server_request = <function 46>,
      _stop = <function 47>,
      _supports_method = <function 48>,
      _text_document_did_open_handler = <function 49>,
      create = <function 50>,
      initialize = <function 51>,
      write_error = <function 52>
    }
  }, {
    _log_prefix = "LSP[pylsp]",
    _on_attach_cbs = { <function 53> },
    _on_exit_cbs = { <function 54>, <function 3> },
    _on_init_cbs = { <function 55> },
    _trace = "off",
    attached_buffers = {
      [4] = true
    },
    cancel_request = <function 56>,
    capabilities = <32>{
      general = {
        positionEncodings = <table 2>
      },
      textDocument = {
        callHierarchy = {
          dynamicRegistration = false
        },
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = <table 3>
            }
          },
          dataSupport = true,
          dynamicRegistration = true,
          isPreferredSupport = true,
          resolveSupport = {
            properties = <table 4>
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = <table 5>,
            insertReplaceSupport = true,
            insertTextModeSupport = <table 6>,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = <table 8>,
            snippetSupport = true,
            tagSupport = <table 10>
          },
          completionItemKind = {
            valueSet = <table 12>
          },
          completionList = {
            itemDefaults = <table 13>
          },
          contextSupport = true,
          dynamicRegistration = false,
          insertTextMode = 1
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          dynamicRegistration = true,
          linkSupport = true
        },
        diagnostic = {
          dynamicRegistration = false
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = <table 14>
          }
        },
        formatting = {
          dynamicRegistration = true
        },
        hover = {
          contentFormat = <table 15>,
          dynamicRegistration = true
        },
        implementation = {
          linkSupport = true
        },
        inlayHint = {
          dynamicRegistration = true,
          resolveSupport = {
            properties = <table 16>
          }
        },
        publishDiagnostics = {
          dataSupport = true,
          relatedInformation = true,
          tagSupport = {
            valueSet = <table 17>
          }
        },
        rangeFormatting = {
          dynamicRegistration = true
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = true,
          prepareSupport = true
        },
        semanticTokens = {
          augmentsSyntaxTokens = true,
          dynamicRegistration = false,
          formats = <table 18>,
          multilineTokenSupport = false,
          overlappingTokenSupport = true,
          requests = {
            full = {
              delta = true
            },
            range = false
          },
          serverCancelSupport = false,
          tokenModifiers = <table 19>,
          tokenTypes = <table 20>
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = <table 21>,
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = true,
          willSaveWaitUntil = true
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = true
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        didChangeConfiguration = {
          dynamicRegistration = false
        },
        didChangeWatchedFiles = {
          dynamicRegistration = true,
          relativePatternSupport = true
        },
        inlayHint = {
          refreshSupport = true
        },
        semanticTokens = {
          refreshSupport = true
        },
        symbol = {
          dynamicRegistration = false,
          symbolKind = {
            valueSet = <table 22>
          }
        },
        workspaceEdit = {
          resourceOperations = <table 23>
        },
        workspaceFolders = true
      }
    },
    commands = {},
    config = {
      autostart = true,
      capabilities = <table 32>,
      cmd = { "/Users/andrea.marisio/.local/share/nvim/mason/bin/pylsp" },
      cmd_cwd = "/Users/andrea.marisio/Projects/claim-image-services",
      filetypes = { "python" },
      handlers = <table 24>,
      init_options = <table 25>,
      log_level = 2,
      message_level = 2,
      name = "pylsp",
      on_attach = <function 53>,
      on_exit = <function 54>,
      on_init = <function 55>,
      root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
      settings = <33>vim.empty_dict(),
      single_file_support = true,
      workspace_folders = <34>{ {
          name = "/Users/andrea.marisio/Projects/claim-image-services",
          uri = "file:///Users/andrea.marisio/Projects/claim-image-services"
        } },
      <metatable> = <table 28>
    },
    dynamic_capabilities = {
      capabilities = {},
      client_id = 4,
      <metatable> = {
        __index = <table 29>
      }
    },
    flags = {},
    get_language_id = <function 14>,
    handlers = <table 24>,
    id = 4,
    initialized = true,
    is_stopped = <function 57>,
    messages = {
      messages = {},
      name = "pylsp",
      progress = {},
      status = {}
    },
    name = "pylsp",
    notify = <function 58>,
    offset_encoding = "utf-16",
    on_attach = <function 59>,
    progress = {
      _idx_read = 0,
      _idx_write = 0,
      _items = {},
      _size = 51,
      pending = {},
      <metatable> = {
        __call = <function 60>,
        __index = <table 30>
      }
    },
    request = <function 61>,
    request_sync = <function 62>,
    requests = {},
    root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
    rpc = {
      is_closing = <function 63>,
      notify = <function 64>,
      request = <function 65>,
      terminate = <function 66>
    },
    server_capabilities = {
      codeActionProvider = true,
      codeLensProvider = {
        resolveProvider = false
      },
      completionProvider = {
        resolveProvider = true,
        triggerCharacters = { "." }
      },
      definitionProvider = true,
      documentFormattingProvider = true,
      documentHighlightProvider = true,
      documentRangeFormattingProvider = true,
      documentSymbolProvider = true,
      executeCommandProvider = {
        commands = { "pylsp_rope.quickfix.generate", "pylsp_rope.refactor.introduce_parameter", "pylsp_rope.refactor.extract.method", "pylsp_rope.refactor.extract.variable", "pylsp_rope.refactor.inline", "pylsp_rope.refactor.local_to_field", "pylsp_rope.refactor.method_to_method_object", "pylsp_rope.refactor.use_function", "pylsp_rope.source.organize_import" }
      },
      experimental = vim.empty_dict(),
      foldingRangeProvider = true,
      hoverProvider = true,
      notebookDocumentSync = {
        notebookSelector = { {
            cells = { {
                language = "python"
              } }
          } }
      },
      referencesProvider = true,
      renameProvider = true,
      signatureHelpProvider = {
        triggerCharacters = { "(", ",", "=" }
      },
      textDocumentSync = {
        change = 2,
        openClose = true,
        save = {
          includeText = true
        }
      },
      workspace = {
        workspaceFolders = {
          changeNotifications = true,
          supported = true
        }
      }
    },
    settings = <table 33>,
    stop = <function 67>,
    supports_method = <function 68>,
    workspace_did_change_configuration = <function 69>,
    workspace_folders = <table 34>,
    <metatable> = <table 31>
  }, {
    _log_prefix = "LSP[ruff]",
    _on_attach_cbs = { <function 70> },
    _on_exit_cbs = { <function 71>, <function 3> },
    _on_init_cbs = { <function 72> },
    _trace = "off",
    attached_buffers = {
      [4] = true
    },
    cancel_request = <function 73>,
    capabilities = <35>{
      general = {
        positionEncodings = <table 2>
      },
      textDocument = {
        callHierarchy = {
          dynamicRegistration = false
        },
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = <table 3>
            }
          },
          dataSupport = true,
          dynamicRegistration = true,
          isPreferredSupport = true,
          resolveSupport = {
            properties = <table 4>
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = <table 5>,
            insertReplaceSupport = true,
            insertTextModeSupport = <table 6>,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = <table 8>,
            snippetSupport = true,
            tagSupport = <table 10>
          },
          completionItemKind = {
            valueSet = <table 12>
          },
          completionList = {
            itemDefaults = <table 13>
          },
          contextSupport = true,
          dynamicRegistration = false,
          insertTextMode = 1
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          dynamicRegistration = true,
          linkSupport = true
        },
        diagnostic = {
          dynamicRegistration = false
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = <table 14>
          }
        },
        formatting = {
          dynamicRegistration = true
        },
        hover = {
          contentFormat = <table 15>,
          dynamicRegistration = true
        },
        implementation = {
          linkSupport = true
        },
        inlayHint = {
          dynamicRegistration = true,
          resolveSupport = {
            properties = <table 16>
          }
        },
        publishDiagnostics = {
          dataSupport = true,
          relatedInformation = true,
          tagSupport = {
            valueSet = <table 17>
          }
        },
        rangeFormatting = {
          dynamicRegistration = true
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = true,
          prepareSupport = true
        },
        semanticTokens = {
          augmentsSyntaxTokens = true,
          dynamicRegistration = false,
          formats = <table 18>,
          multilineTokenSupport = false,
          overlappingTokenSupport = true,
          requests = {
            full = {
              delta = true
            },
            range = false
          },
          serverCancelSupport = false,
          tokenModifiers = <table 19>,
          tokenTypes = <table 20>
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = <table 21>,
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = true,
          willSaveWaitUntil = true
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = true
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        didChangeConfiguration = {
          dynamicRegistration = false
        },
        didChangeWatchedFiles = {
          dynamicRegistration = true,
          relativePatternSupport = true
        },
        inlayHint = {
          refreshSupport = true
        },
        semanticTokens = {
          refreshSupport = true
        },
        symbol = {
          dynamicRegistration = false,
          symbolKind = {
            valueSet = <table 22>
          }
        },
        workspaceEdit = {
          resourceOperations = <table 23>
        },
        workspaceFolders = true
      }
    },
    commands = {},
    config = {
      autostart = true,
      capabilities = <table 35>,
      cmd = { "/Users/andrea.marisio/.local/share/nvim/mason/bin/ruff", "server" },
      cmd_cwd = "/Users/andrea.marisio/Projects/claim-image-services",
      filetypes = { "python" },
      handlers = <table 24>,
      init_options = <table 25>,
      log_level = 2,
      message_level = 2,
      name = "ruff",
      on_attach = <function 70>,
      on_exit = <function 71>,
      on_init = <function 72>,
      root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
      settings = <36>{},
      single_file_support = true,
      workspace_folders = <37>{ {
          name = "/Users/andrea.marisio/Projects/claim-image-services",
          uri = "file:///Users/andrea.marisio/Projects/claim-image-services"
        } },
      <metatable> = <table 28>
    },
    dynamic_capabilities = {
      capabilities = {
        ["workspace/didChangeWatchedFiles"] = { {
            id = "ruff-server-watch",
            method = "workspace/didChangeWatchedFiles",
            registerOptions = {
              watchers = { {
                  globPattern = "**/.ruff.toml"
                }, {
                  globPattern = "**/ruff.toml"
                }, {
                  globPattern = "**/pyproject.toml"
                } }
            }
          } }
      },
      client_id = 5,
      <metatable> = {
        __index = <table 29>
      }
    },
    flags = {},
    get_language_id = <function 14>,
    handlers = <table 24>,
    id = 5,
    initialized = true,
    is_stopped = <function 74>,
    messages = {
      messages = {},
      name = "ruff",
      progress = {},
      status = {}
    },
    name = "ruff",
    notify = <function 75>,
    offset_encoding = "utf-16",
    on_attach = <function 76>,
    progress = {
      _idx_read = 0,
      _idx_write = 0,
      _items = {},
      _size = 51,
      pending = {},
      <metatable> = {
        __call = <function 77>,
        __index = <table 30>
      }
    },
    request = <function 78>,
    request_sync = <function 79>,
    requests = {},
    root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
    rpc = {
      is_closing = <function 80>,
      notify = <function 81>,
      request = <function 82>,
      terminate = <function 83>
    },
    server_capabilities = {
      codeActionProvider = {
        codeActionKinds = { "quickfix", "source.fixAll.ruff", "source.organizeImports.ruff", "notebook.source.fixAll.ruff", "notebook.source.organizeImports.ruff" },
        resolveProvider = true,
        workDoneProgress = true
      },
      diagnosticProvider = {
        identifier = "Ruff",
        interFileDependencies = false,
        workDoneProgress = true,
        workspaceDiagnostics = false
      },
      documentFormattingProvider = true,
      documentRangeFormattingProvider = true,
      executeCommandProvider = {
        commands = { "ruff.applyFormat", "ruff.applyAutofix", "ruff.applyOrganizeImports", "ruff.printDebugInformation" },
        workDoneProgress = false
      },
      hoverProvider = true,
      notebookDocumentSync = {
        notebookSelector = { {
            cells = { {
                language = "python"
              } }
          } },
        save = false
      },
      positionEncoding = "utf-16",
      textDocumentSync = {
        change = 2,
        openClose = true,
        willSave = false,
        willSaveWaitUntil = false
      },
      workspace = {
        workspaceFolders = {
          changeNotifications = true,
          supported = true
        }
      }
    },
    settings = <table 36>,
    stop = <function 84>,
    supports_method = <function 85>,
    workspace_did_change_configuration = <function 86>,
    workspace_folders = <table 37>,
    <metatable> = <table 31>
  }, {
    _log_prefix = "LSP[pyright]",
    _on_attach_cbs = { <function 87> },
    _on_exit_cbs = { <function 88>, <function 3> },
    _on_init_cbs = { <function 89> },
    _trace = "off",
    attached_buffers = {
      [4] = true
    },
    cancel_request = <function 90>,
    capabilities = <38>{
      general = {
        positionEncodings = <table 2>
      },
      textDocument = {
        callHierarchy = {
          dynamicRegistration = false
        },
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = <table 3>
            }
          },
          dataSupport = true,
          dynamicRegistration = true,
          isPreferredSupport = true,
          resolveSupport = {
            properties = <table 4>
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = <table 5>,
            insertReplaceSupport = true,
            insertTextModeSupport = {
              valueSet = <table 7>
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = <table 9>
            },
            snippetSupport = true,
            tagSupport = {
              valueSet = <table 11>
            }
          },
          completionItemKind = {
            valueSet = <table 12>
          },
          completionList = {
            itemDefaults = <table 13>
          },
          contextSupport = true,
          dynamicRegistration = false,
          insertTextMode = 1
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          dynamicRegistration = true,
          linkSupport = true
        },
        diagnostic = {
          dynamicRegistration = false
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = <table 14>
          }
        },
        formatting = {
          dynamicRegistration = true
        },
        hover = {
          contentFormat = <table 15>,
          dynamicRegistration = true
        },
        implementation = {
          linkSupport = true
        },
        inlayHint = {
          dynamicRegistration = true,
          resolveSupport = {
            properties = <table 16>
          }
        },
        publishDiagnostics = {
          dataSupport = true,
          relatedInformation = true,
          tagSupport = {
            valueSet = <table 17>
          }
        },
        rangeFormatting = {
          dynamicRegistration = true
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = true,
          prepareSupport = true
        },
        semanticTokens = {
          augmentsSyntaxTokens = true,
          dynamicRegistration = false,
          formats = <table 18>,
          multilineTokenSupport = false,
          overlappingTokenSupport = true,
          requests = {
            full = {
              delta = true
            },
            range = false
          },
          serverCancelSupport = false,
          tokenModifiers = <table 19>,
          tokenTypes = <table 20>
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = <table 21>,
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = true,
          willSaveWaitUntil = true
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = true
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        didChangeConfiguration = {
          dynamicRegistration = false
        },
        didChangeWatchedFiles = {
          dynamicRegistration = true,
          relativePatternSupport = true
        },
        inlayHint = {
          refreshSupport = true
        },
        semanticTokens = {
          refreshSupport = true
        },
        symbol = {
          dynamicRegistration = false,
          symbolKind = {
            valueSet = <table 22>
          }
        },
        workspaceEdit = {
          resourceOperations = <table 23>
        },
        workspaceFolders = true
      }
    },
    commands = {},
    config = {
      autostart = true,
      capabilities = <table 38>,
      cmd = { "/Users/andrea.marisio/.local/share/nvim/mason/bin/pyright-langserver", "--stdio" },
      cmd_cwd = "/Users/andrea.marisio/Projects/claim-image-services",
      filetypes = { "python" },
      handlers = <table 24>,
      init_options = <table 25>,
      log_level = 2,
      message_level = 2,
      name = "pyright",
      on_attach = <function 87>,
      on_exit = <function 88>,
      on_init = <function 89>,
      root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
      settings = <39>{
        python = {
          analysis = {
            autoSearchPaths = true,
            diagnosticMode = "openFilesOnly",
            useLibraryCodeForTypes = true
          }
        }
      },
      single_file_support = true,
      workspace_folders = <40>{ {
          name = "/Users/andrea.marisio/Projects/claim-image-services",
          uri = "file:///Users/andrea.marisio/Projects/claim-image-services"
        } },
      <metatable> = <table 28>
    },
    dynamic_capabilities = {
      capabilities = {
        ["workspace/didChangeWatchedFiles"] = { {
            id = "626767b7-a8c1-4e3f-b767-2826c6047660",
            method = "workspace/didChangeWatchedFiles",
            registerOptions = {
              watchers = { {
                  globPattern = "**/pyrightconfig.json",
                  kind = 7
                }, {
                  globPattern = "**",
                  kind = 7
                }, {
                  globPattern = {
                    baseUri = "file:///opt/homebrew/Cellar/python%403.11/3.11.10/Frameworks/Python.framework/Versions/3.11/lib/python3.11",
                    pattern = "**"
                  },
                  kind = 7
                } }
            }
          } }
      },
      client_id = 6,
      <metatable> = {
        __index = <table 29>
      }
    },
    flags = {},
    get_language_id = <function 14>,
    handlers = <table 24>,
    id = 6,
    initialized = true,
    is_stopped = <function 91>,
    messages = {
      messages = {},
      name = "pyright",
      progress = {},
      status = {}
    },
    name = "pyright",
    notify = <function 92>,
    offset_encoding = "utf-16",
    on_attach = <function 93>,
    progress = {
      _idx_read = 0,
      _idx_write = 0,
      _items = {},
      _size = 51,
      pending = {},
      <metatable> = {
        __call = <function 94>,
        __index = <table 30>
      }
    },
    request = <function 95>,
    request_sync = <function 96>,
    requests = {},
    root_dir = "/Users/andrea.marisio/Projects/claim-image-services",
    rpc = {
      is_closing = <function 97>,
      notify = <function 98>,
      request = <function 99>,
      terminate = <function 100>
    },
    server_capabilities = {
      callHierarchyProvider = true,
      codeActionProvider = {
        codeActionKinds = { "quickfix", "source.organizeImports" },
        workDoneProgress = true
      },
      completionProvider = {
        completionItem = {
          labelDetailsSupport = true
        },
        resolveProvider = true,
        triggerCharacters = { ".", "[", '"', "'" },
        workDoneProgress = true
      },
      declarationProvider = {
        workDoneProgress = true
      },
      definitionProvider = {
        workDoneProgress = true
      },
      documentHighlightProvider = {
        workDoneProgress = true
      },
      documentSymbolProvider = {
        workDoneProgress = true
      },
      executeCommandProvider = {
        commands = {},
        workDoneProgress = true
      },
      hoverProvider = {
        workDoneProgress = true
      },
      referencesProvider = {
        workDoneProgress = true
      },
      renameProvider = {
        prepareProvider = true,
        workDoneProgress = true
      },
      signatureHelpProvider = {
        triggerCharacters = { "(", ",", ")" },
        workDoneProgress = true
      },
      textDocumentSync = {
        change = 2,
        openClose = true,
        save = {
          includeText = false
        },
        willSave = false,
        willSaveWaitUntil = false
      },
      typeDefinitionProvider = {
        workDoneProgress = true
      },
      workspace = {
        workspaceFolders = {
          changeNotifications = true,
          supported = true
        }
      },
      workspaceSymbolProvider = {
        workDoneProgress = true
      }
    },
    settings = <table 39>,
    stop = <function 101>,
    supports_method = <function 102>,
    workspace_did_change_configuration = <function 103>,
    workspace_folders = <table 40>,
    <metatable> = <table 31>
  } }
